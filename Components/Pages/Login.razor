@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using UsgphPlanning.Models
@using UsgphPlanning.Services
@using Microsoft.EntityFrameworkCore
@using UsgphPlanning
@using Microsoft.AspNetCore.Authorization
@attribute [AllowAnonymous]
@inject NavigationManager NavigationManager
@inject IDbContextFactory<UsgphPlanningDbContext> DbContextFactory
@inject AuthenticationStateProvider AuthStateProvider

<div class="login-background">
    <div class="container py-5">
        <div class="row justify-content-center align-items-center min-vh-100">
            <div class="col-lg-5">
                <div class="text-center mb-4 app-title">
                    <h1 class="display-5 fw-bold text-white mb-2">USGPH</h1>
                    <p class="text-white-50 mb-4">Application Administrateur</p>
                    <p class="text-white-50 small">US Grande Presquile Handball - Guérande - La Baule</p>
                </div>
                <div class="card border-0 shadow-lg rounded-5 overflow-hidden login-card">
                    <div class="card-header bg-primary text-white py-4 position-relative">
                        <div class="d-flex align-items-center justify-content-center">
                            <i class="bi bi-lock-fill fs-2 me-2"></i>
                            <h3 class="card-title mb-0 fs-4">Espace Administrateur</h3>
                        </div>
                        <div class="login-wave"></div>
                    </div>
                    <div class="card-body p-4 p-sm-5">
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger d-flex align-items-center mb-4">
                                <i class="bi bi-exclamation-triangle-fill me-3 fs-4"></i>
                                <div>@errorMessage</div>
                            </div>
                        }
                        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" class="needs-validation">
                            <DataAnnotationsValidator />
                            <div class="mb-4">
                                <label for="email" class="form-label fw-medium">Email</label>
                                <div class="input-group input-group-lg has-validation">
                                    <span class="input-group-text bg-light"><i class="bi bi-envelope"></i></span>
                                    <InputText id="email" @bind-Value="loginModel.Email" class="form-control form-control-lg" placeholder="Entrez votre email administrateur" />
                                </div>
                                <ValidationMessage For="@(() => loginModel.Email)" class="text-danger small mt-1" />
                            </div>
                            <div class="mb-4">
                                <label for="password" class="form-label fw-medium">Mot de passe</label>
                                <div class="input-group input-group-lg has-validation">
                                    <span class="input-group-text bg-light"><i class="bi bi-lock"></i></span>
                                    <InputText id="password" @bind-Value="loginModel.Password" type="password" class="form-control form-control-lg" placeholder="Entrez votre mot de passe" />
                                </div>
                                <ValidationMessage For="@(() => loginModel.Password)" class="text-danger small mt-1" />
                            </div>
                            <div class="d-grid">
                                <button type="submit" class="btn btn-primary btn-lg btn-login">
                                    <i class="bi bi-box-arrow-in-right me-2"></i>Connexion Admin
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
                <div class="text-center mt-3">
                    <p class="text-white-50 small">© @DateTime.Now.Year USGPH Handball - Tous droits réservés</p>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .login-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        background-size: cover;
        background-position: center;
        z-index: 0;
    }

    .login-card {
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(10px);
        transition: all 0.3s ease;
    }

    .login-card:hover {
        transform: translateY(-15px);
        box-shadow: 0 20px 40px rgba(0,0,0,0.2);
    }

    .app-title {
        text-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    .login-wave {
        position: absolute;
        bottom: -30px;
        left: 0;
        width: 100%;
        height: 50px;
        background: linear-gradient(to right, transparent, rgba(255,255,255,0.2), transparent);
        transform: skewY(-2deg);
        z-index: -1;
    }

    .btn-login {
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .btn-login::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(120deg, transparent, rgba(255,255,255,0.3), transparent);
        transition: all 0.5s ease;
    }

    .btn-login:hover::before {
        left: 100%;
    }

    .input-group-text {
        background-color: rgba(255,255,255,0.7) !important;
    }
</style>

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            var user = await context.Users
                .FirstOrDefaultAsync(u => u.Email == loginModel.Email);

            if (user == null)
            {
                errorMessage = "Email ou mot de passe invalide";
                return;
            }

            // Vérification si l'utilisateur est l'admin unique (ID 5)
            if (user.Id != 5)
            {
                errorMessage = "Accès réservé à l'administrateur principal";
                return;
            }

            if (BCrypt.Net.BCrypt.Verify(loginModel.Password, user.Password))
            {
                var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;

                // Log de débogage
                System.Diagnostics.Debug.WriteLine($"Tentative d'authentification pour {user.Email}");

                await customAuthStateProvider.MarkUserAsAuthenticated(user);

                // Vérification explicite de l'état d'authentification
                var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                if (authState.User.Identity?.IsAuthenticated == true)
                {
                    NavigationManager.NavigateTo("/home");
                }
                else
                {
                    errorMessage = "Échec de l'authentification";
                }
            }
            else
            {
                errorMessage = "Email ou mot de passe invalide";
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Erreur lors de la connexion : {ex.Message}");
            errorMessage = $"Erreur lors de la connexion: {ex.Message}";
        }
    }
}